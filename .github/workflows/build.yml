name: Build/release

on:
  push:
    tags:
      - 'v*'
  schedule:
    - cron: '0 10 * * 0'
  workflow_dispatch:


jobs:
  release:
    runs-on: ${{ matrix.os }}

    env:
      is_tag: ${{ startsWith(github.ref, 'refs/tags/v') }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
#        os: [windows-latest]

    steps:
      # Windows fix. See https://github.com/actions/checkout/issues/226
      - run: git config --global core.autocrlf false

      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

       # Because of timeout issue https://github.com/yarnpkg/yarn/issues/4890
      - run: yarn install --network-timeout 1000000

      - name: Install and login to Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # Log in to Snap Store
          snapcraft_token: ${{ secrets.snapcraft_token }}

      - name: Prepare Apple API key
        # Import Apple API key for app notarization on macOS and for uploading to Mac App Store
        # 'altool --help': '--apiKey' will search the following directories in sequence for a private key file with the name of:
        # 'AuthKey_<api_key>.p8': './private_keys', '~/private_keys', '~/.private_keys', and '~/.appstoreconnect/private_keys'.
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p ~/.appstoreconnect/private_keys/
          echo '${{ secrets.api_key }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

      - name: Download ffmpeg for Mac
        if: startsWith(matrix.os, 'macos')
        run: yarn download-ffmpeg-mac

      - name: Download ffmpeg for Windows
        if: startsWith(matrix.os, 'windows')
        run: yarn download-ffmpeg-windows

      - name: Download ffmpeg for Linux
        if: startsWith(matrix.os, 'linux')
        run: yarn download-ffmpeg-linux

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ env.is_tag == 'true' }}

          max_attempts: 2

          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

# Temporary 30 day certificate, not needed for Microsoft Store
#          windows_certs: ${{ secrets.windows_certs }}
#          windows_certs_password: ${{ secrets.windows_certs_password }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.api_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      - name: Upload to Mac App Store
        if: startsWith(matrix.os, 'macos') && env.is_tag == 'true'
        # In case of ERROR ITMS-90189: Redundant Binary Upload
        # Note: this will succeed on any errors, so beware
        continue-on-error: true
        run: |
          xcrun altool --upload-app -f dist/mas/LosslessCut-mac.pkg --apiKey ${{ secrets.api_key_id }} --apiIssuer ${{ secrets.api_key_issuer_id }}
